#include "smallsh.h"
#include <stdlib.h>
#include <signal.h>

/* 프로그램 버퍼 및 작업용 포인터들 */
static char inpbuf[MAXBUF], tokbuf[2*MAXBUF], *ptr = inpbuf, *tok = tokbuf;
char *prompt = "Command>"; /* prompt */

int userin(char *p) //프롬프트를 프린트하고 한줄을 읽는다.
{
  int c, count;
  /* 초기화 */
  ptr = inpbuf;
  tok = tokbuf;

  /* 프롬프트 표시 */
  printf("%s ", p);

  count = 0;

  while(1){
    if((c = getchar()) == EOF)
      return(EOF);

    if(count < MAXBUF)
      inpbuf[count++] = c;

    if(c == '\n' && count < MAXBUF){
      inpbuf[count] = '\0';
      return(count);
    }

    /* 줄이 너무 길면 재시작 */
    if(c == '\n'){
      printf("smallsh: input line too long\n");
      count = 0;
      printf("%s ", p);
    }
  }
}

static char special[] = {' ', '\t', '&', ';', '\n', '\0'};

int inarg(char c) /* 한 문자가 보통 인수의 일부가 될 수 있는지를 결정 */
{
  char *wrk;
  for(wrk = special; *wrk != '\0'; wrk++)
    if(c == *wrk)
      return(0);

  return(1);
}

int gettok(char **outptr) /* 토큰을 가져와서 tokbuf에 넣는다. */
{
  int type;
  /* outptr 문자열을 tok로 지정한다.*/
  *outptr = tok;

  /* 토큰을 포함하고 있는 버퍼로부터 여백을 제거한다. */
  while(*ptr == ''|| *ptr =='\t') ptr++;
    
  /*토큰을 포함하고 있는 버퍼로부터 여백을 제거한다.*/
  *tok++ = *ptr;

  /*버퍼내의 토큰에 따라 유형 변수를 지정한다.*/
  switch(*ptr++){
    case '\n':
      type = EOL; break;
    case '&':
      type = AMPERSAND; break;
    case ';':
      type = SEMICOLON; break;
    default:
      type = ARG;
      /*유효한 보통문자들을 계속 읽는다*/
      while(inarg(*ptr))
        *tok++ = *ptr++;
  }

  *tok++ = '\0';
  return(type);
}

/* wait을 선택사항으로 하여 명령을 수행한다. */
int runcommand(char **cline,int where)
{
  pid_t pid;
  int status;
  
   switch(pid = fork()) {
    case -1:
            perror("smallsh");
            return(-1);
    case 0: 
            execvp(*cline, cline);
            perror(*cline);
            exit(1);


  /* 부모의 코드 */
  /* 만일 백그라운드 프로세스이면 프로세스 식별자를 프린트하고 퇴장한다. */
  if(where == BACKGROUND){;
    return(0);
  }

  /* 프로세스 pid가 퇴장할 때까지 기다린다. */
  if(waitpid(pid,&status,0) == -1) return(-1);
   else
     {return(status);}
}

int procline(void) /* 입력줄을 처리한다. */
{
  char *arg[MAXARG+1]; /*runcommand를 위한 포인터 배열 */
  int toktype; /* 명령내의 토큰의 유형 */
  int narg; /* 지금까지의 인수 수 */
  int type; /* FOREGROUND or BACKGROUND */

  /* intr_p 초기화*/
  narg = 0;

  for(;;){ /* 무한 루프 */
    /* 토큰 유형에 따라 case를 나눈다. */
    switch(toktype = gettok(&arg[narg])){
      case ARG:
        if(narg < MAXARG)
          narg++;
        break;

      case EOL:
      case SEMICOLON:
      case AMPERSAND:
        type = (toktype == AMPERSAND) ? BACKGROUND : FOREGROUND;

        if(narg != 0){
          arg[narg] = NULL;
          runcommand(arg, type);
        }

        if(toktype == EOL)
          return;

        narg = 0;
        break;
    }
  }
}

int main()
{
  while(userin(prompt) != EOF){
    procline();
  }
}